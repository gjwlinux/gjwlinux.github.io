<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python异常处理]]></title>
    <url>%2F2019%2F05%2F28%2Fpython%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[语法: 12345try: except TypeError: #相当于if判断 except 错误类型: #多个except elif except Exception as e: #如果所有的except都没捕获到，就走Exception else: #没有异常，走else语句 try 基本使用 12345678910111213141516171819In [4]: 1 + &quot;2&quot; ---------------------------------------------------------------------------TypeError Traceback (most recent call last)&lt;ipython-input-4-db092cb74d2d&gt; in &lt;module&gt;----&gt; 1 1 + &quot;2&quot;TypeError: unsupported operand type(s) for +: &apos;int&apos; and &apos;str&apos;# 这时程序报错会退出如果用 try处理，只会抛出异常,下面的程序会接着执行In [5]: try: ...: 1 + &quot;2&quot; ...: except TypeError: ...: print(&apos;str to int error.&apos;) ...: except Exception as e: ...: print(e) ...: print(&apos;test&apos;) ...: ...: str to int error.test Exception使用,会将没有定义的异常，抛出 12345678In [6]: try: ...: 1 + abc ...: except TypeError: ...: print(&apos;str to int error.&apos;) ...: except Exception as e: ...: print(e) ...: name &apos;abc&apos; is not defined]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python列表常用方法]]></title>
    <url>%2F2019%2F05%2F21%2Fpython%E5%88%97%E8%A1%A8%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[查看列表有哪些方法 12&gt;&gt;&gt; dir(list)[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__delitem__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__iadd__&apos;, &apos;__imul__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__reversed__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__setitem__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;append&apos;, &apos;clear&apos;, &apos;copy&apos;, &apos;count&apos;, &apos;extend&apos;, &apos;index&apos;, &apos;insert&apos;, &apos;pop&apos;, &apos;remove&apos;, &apos;reverse&apos;, &apos;sort&apos;] append列表中追加内容 1234&gt;&gt;&gt; lst = [1,2,3,4]&gt;&gt;&gt; lst.append(5)&gt;&gt;&gt; lst[1, 2, 3, 4, 5] count统计列表中元素出现的次数 12345&gt;&gt;&gt; lst.append(1)&gt;&gt;&gt; lst.count(1)2&gt;&gt;&gt; lst.count(2)1 extend追加内容，但是不会出现列表嵌套结构，append会嵌套 12345678&gt;&gt;&gt; lst1 = [1,2,3]&gt;&gt;&gt; lst.append(lst1)&gt;&gt;&gt; lst[1, 2, 3, 4, 5, 1, [1, 2, 3]]&gt;&gt;&gt; lst.extend(lst1)&gt;&gt;&gt; lst[1, 2, 3, 4, 5, 1, [1, 2, 3], 1, 2, 3]&gt;&gt;&gt; index 返回索引位置 12&gt;&gt;&gt; lst.index(1)0 insert 插入内容，指定索引位置 1234&gt;&gt;&gt; lst.insert(0,&apos;a&apos;)&gt;&gt;&gt; lst[&apos;a&apos;, 1, 2, 3, 4, 5, 1, [1, 2, 3], 1, 2, 3]&gt;&gt;&gt; pop 删除列表内容，按照索引位置，返回删除信息 1234&gt;&gt;&gt; lst.pop(0)&apos;a&apos;&gt;&gt;&gt; lst[1, 2, 3, 4, 5, 1, [1, 2, 3], 1, 2, 3] remove 移除列表内容，不反回移除信息 1234&gt;&gt;&gt; lst.remove(1)&gt;&gt;&gt; lst[2, 3, 4, 5, 1, [1, 2, 3], 1, 2, 3]&gt;&gt;&gt; reverse 反转列表 1234&gt;&gt;&gt; lst = [1,2,3,4,5,6]&gt;&gt;&gt; lst.reverse()&gt;&gt;&gt; lst[6, 5, 4, 3, 2, 1] sort 排序 123&gt;&gt;&gt; lst.sort()&gt;&gt;&gt; lst[1, 2, 3, 4, 5, 6]]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python字符常用方法]]></title>
    <url>%2F2019%2F05%2F21%2Fpython%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[字符串方法 查看字符串有哪些方法 1234&gt;&gt;&gt; mystr&apos;1,2,3,2,a,b,c,a&apos;&gt;&gt;&gt; dir(mystr)[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__getnewargs__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mod__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__rmod__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;capitalize&apos;, &apos;casefold&apos;, &apos;center&apos;, &apos;count&apos;, &apos;encode&apos;, &apos;endswith&apos;, &apos;expandtabs&apos;, &apos;find&apos;, &apos;format&apos;, &apos;format_map&apos;, &apos;index&apos;, &apos;isalnum&apos;, &apos;isalpha&apos;, &apos;isdecimal&apos;, &apos;isdigit&apos;, &apos;isidentifier&apos;, &apos;islower&apos;, &apos;isnumeric&apos;, &apos;isprintable&apos;, &apos;isspace&apos;, &apos;istitle&apos;, &apos;isupper&apos;, &apos;join&apos;, &apos;ljust&apos;, &apos;lower&apos;, &apos;lstrip&apos;, &apos;maketrans&apos;, &apos;partition&apos;, &apos;replace&apos;, &apos;rfind&apos;, &apos;rindex&apos;, &apos;rjust&apos;, &apos;rpartition&apos;, &apos;rsplit&apos;, &apos;rstrip&apos;, &apos;split&apos;, &apos;splitlines&apos;, &apos;startswith&apos;, &apos;strip&apos;, &apos;swapcase&apos;, &apos;title&apos;, &apos;translate&apos;, &apos;upper&apos;, &apos;zfill&apos;] count 统计字符串中出现的个数 1234&gt;&gt;&gt; mystr.count(&apos;1&apos;)1&gt;&gt;&gt; mystr.count(&apos;a&apos;)2 startswith 查看字符串是不是以什么开头,返回布尔值 1234&gt;&gt;&gt; mystr.startswith(&apos;a&apos;)False&gt;&gt;&gt; mystr.startswith(&apos;1&apos;)True endswith 查看字符串是不是以什么结尾，返回布尔值 1234&gt;&gt;&gt; mystr.endswith(&apos;a&apos;)True&gt;&gt;&gt; mystr.endswith(&apos;1&apos;)False find 检查字符串中是否有字符，指定开始与结尾，不存在返回-1 12345678&gt;&gt;&gt; mystr.find(&apos;a&apos;,0,2)-1&gt;&gt;&gt; mystr&apos;1,2,3,2,a,b,c,a&apos;&gt;&gt;&gt; mystr.find(&apos;a&apos;,1)8&gt;&gt;&gt; mystr.find(&apos;1&apos;,0,2)0 format 格式化输出 12&gt;&gt;&gt; &apos;hello my name is &#123;&#125;&apos;.format(&apos;gjw&apos;)&apos;hello my name is gjw&apos; index 查找字符串索引位置 1234&gt;&gt;&gt; mystr.index(&apos;1&apos;)0&gt;&gt;&gt; mystr.index(&apos;a&apos;)8 isdigit 是不是数字组成，返回布尔值 12345&gt;&gt;&gt; mystr.isdigit()False&gt;&gt;&gt; mystr1 = &apos;123&apos;&gt;&gt;&gt; mystr1.isdigit()True islower 是不是小写，返回布尔值 12345&gt;&gt;&gt; mystr.islower()True&gt;&gt;&gt; mystr1 = &apos;ABC&apos;&gt;&gt;&gt; mystr1.islower()False isupper 是不是大写，返回布尔值 1234&gt;&gt;&gt; mystr1.isupper()True&gt;&gt;&gt; mystr.isupper()False join 连接字符串 1234&gt;&gt;&gt; str = &apos;-&apos;&gt;&gt;&gt; seq = (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)&gt;&gt;&gt; str.join( seq )&apos;a-b-c&apos; ljust 字符串左对齐,默认使用空格填充至指定长度的新字符串 123&gt;&gt;&gt; str = &apos;hi&apos;&gt;&gt;&gt; str.ljust(10,&apos;!&apos;)&apos;hi!!!!!!!!&apos; lower 将字符串转换为小写 1234&gt;&gt;&gt; mystr = &apos;ABC&apos;&gt;&gt;&gt; &gt;&gt;&gt; mystr.lower()&apos;abc&apos; lstrip 去掉字符串左边空格，或指定字符 123&gt;&gt;&gt; mystr = &apos;abcdef&apos;&gt;&gt;&gt; mystr.lstrip(&apos;a&apos;)&apos;bcdef&apos; replace 替换字符串 123&gt;&gt;&gt; mystr.replace(&apos;f&apos;,&apos;a&apos;)&apos;abcdea&apos;&gt;&gt;&gt; rjust 字符串右对齐,默认使用空格填充至指定长度的新字符串 123&gt;&gt;&gt; mystr = &apos;hi&apos;&gt;&gt;&gt; mystr.rjust(10,&apos;!&apos;)&apos;!!!!!!!!hi&apos; split 字符串切分返回列表 12&gt;&gt;&gt; mystr.split(&apos;c&apos;)[&apos;ab&apos;, &apos;ab&apos;, &apos;&apos;] strip 去除指定字符 123&gt;&gt;&gt; mystr.strip(&apos;a&apos;)&apos;bcabc&apos;&gt;&gt;&gt; upper 将字符串变为大写 123&gt;&gt;&gt; mystr.upper()&apos;ABCABC&apos;&gt;&gt;&gt;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
